using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;

class Program
{
    static string filePath = "secret.txt";
    static byte xorKey;

    static void Main(string[] args)
    {
        Console.WriteLine("Enter your password: ");
        string password = Console.ReadLine();
        xorKey = GetKeyFromPassword(password);

        if (!File.Exists(filePath))
        {
            Console.WriteLine("Save not found. Creating encrypted save file...");
            string defaultData = "[SAFE] Welcome to your encrypted adventure!";
            string encrypted = EncryptDecrypt(defaultData);
            File.WriteAllText(filePath, encrypted);
        }

        try
        {
            string rawContent = File.ReadAllText(filePath);
            string decrypted = EncryptDecrypt(rawContent);

            if (!decrypted.StartsWith("[SAFE]"))
            {
                Console.WriteLine("Incorrect password. Decryption failed.");
                return;
            }

            Console.WriteLine("Secret file Loaded: ");
            Console.WriteLine(decrypted.Substring(6));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading or decrypting file: {ex.Message}");
        }
    }

    static byte GetKeyFromPassword(string password)
    {
        using (SHA256 sha = SHA256.Create())
        {
            byte[] hash = sha.ComputeHash(Encoding.UTF8.GetBytes(password));
            return hash[0];
        }
    }

    static string EncryptDecrypt(string input)
    {
        StringBuilder output = new StringBuilder();
        foreach (char c in input)
        {
            char encryptedChar = (char)(c ^ xorKey);
            output.Append(encryptedChar);
        }
        return output.ToString();
    }
}
